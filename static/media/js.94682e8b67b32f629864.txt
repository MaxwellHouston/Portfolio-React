---------------------App.js------------------------------
import React from 'react';
import './App.css';
import { colorway } from './utility/colorway';
import logo from './utility/images/reddit-logo.png';
import { ArticleLayout } from './features/articleLayout/ArticleLayout';
import { Article } from './features/article/Article';
import { Settings } from './features/settings/Settings';
import { Topics } from './features/topics/Topics';
import { BrowserRouter as Router, Route} from 'react-router-dom';
import { isTopicsRendered, isSettingsRendered, isDarkMode, toggleSettings } from './features/settings/settingsSlice';
import { useSelector, useDispatch } from 'react-redux';

function App() {
  const dispatch = useDispatch();
  const renderTopics = useSelector(isTopicsRendered);
  const renderSettings = useSelector(isSettingsRendered);
  const { normal, dark } = colorway;
  const darkMode = useSelector(isDarkMode);
  const colors = darkMode ? dark : normal;
  return (
    <div className='background' style={colors.app.content} >
      <header style={colors.header.header}>
        <img src={logo} alt='reddit-logo' />
        <h1 style={colors.header.headerH1}>Front Page <span>personal Reddit browser</span></h1>
        <button onClick={()=>{dispatch(toggleSettings())}} style={colors.header.headerButton}>Settings</button>
      </header>
      <div className="content">
        <Router>
        <Route path='/' exact component={ArticleLayout} />
        <Route path='/:id' component = {Article} />
        </Router>
        {renderSettings && <Settings />}
        {renderTopics && <Topics />}
      </div>
    </div>
  );
}

export default App;

---------------------Article.js------------------------------
import React from "react";
import { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import { renderAwards, dateConverter } from "../../utility/functions";
import noImage from '../../utility/images/no-image.png';
import upArrow from '../../utility/images/up-arrow.png';
import downArrow from '../../utility/images/down-arrow.png';
import { Link } from "react-router-dom";
import { Comment } from '../comments/Comment';
import { colorway } from "../../utility/colorway";
import twitter from '../../utility/images/twitter-logo.png';
import { isDarkMode } from "../settings/settingsSlice";




export const Article = ({match}) => {
    const [comments, setComments] = useState([]);
    const [fullArticle, setFullArticle] = useState({})
    const getArticleById = useSelector(state => state.articles.articles.filter(article => article.data.id === match.params.id));
    const article = getArticleById[0].data;
    const { normal, dark } = colorway;
    const darkMode = useSelector(isDarkMode);
    const colors = darkMode ? dark : normal;

    const fetchFullArticle = async () => {
        let url = `https://www.reddit.com${article.permalink}.json`;
        let response = await fetch(url);
        let json = await response.json();
        let commentArray = json[1].data.children.map(comment => comment.data)
        setComments(commentArray);
        setFullArticle(json[0].data.children[0].data);
    };

    const fullMediaSelector = () => {
        if(fullArticle.is_video){
            return (
                <div className='article-content-single'>
                    <video src={fullArticle.media.reddit_video.fallback_url} controls>Video not supported</video>
                </div>
                )
        } else if(fullArticle.thumbnail === 'default' || fullArticle.thumbnail === ''){
            return (
                <div className='article-content'>
                    <img src={noImage} alt='not avilable' />
                    <a href={fullArticle.url}><p>Link to article</p></a>
                </div>
                )
        } else if(fullArticle.post_hint === 'link'){
            return (
                <div className='article-content'>
                    <img src={fullArticle.thumbnail} alt='not avilable' />
                    <a href={fullArticle.url}><p>Link to article</p></a>
                </div>
                )
        } else if(fullArticle.is_gallery){
            return (
                <div className='article-content'>
                    <img src={fullArticle.thumbnail} alt='not avilable' />
                    <a href={fullArticle.url}><p>Link to gallery</p></a>
                </div>
                )
        } else if(article.thumbnail === 'self'){
            if(article.selftext.includes('twitter.com')){
                return (
                    <div className='article-content'>
                        <img src={twitter} alt='twitter logo' />
                        <a href={fullArticle.selftext}><p>Link to tweet</p></a>
                    </div>
                    )    
            }
            return <p className='article-text'>{article.selftext}</p>
        } else {
            return (
            <div className='article-content-single'>
                <img src={fullArticle.url} alt='' />
            </div>
            )
        }
    }

    useEffect( () => {
        fetchFullArticle();
    });

    return (
        <article style={colors.article.article}>
        <div className='article-header'>
            <Link to='/' className='back-button'><button style={colors.article.button}>Back</button></Link>
            <h2>{article.title}</h2>
        </div>
        <div className='award-container'>
                {renderAwards(article)}
        </div>
        {fullMediaSelector()}
        <div className='article-footer'>
            <div className="up-votes">
                <img src={upArrow} alt='up arrow' />
                <p className="votes">{article.ups - article.downs}</p>
                <img src={downArrow} alt='down arrow' />
            </div>
            <p className="poster">Posted by: {fullArticle.author}</p>
            <p className="date">{dateConverter(fullArticle)}</p>
        </div>
        { comments.length !== 0 &&
        <div className="comments-container" style={colors.comments.commentsContainer}>
            <h2>Comments</h2>
            {comments.map(comment => <Comment key={comment.id} data={comment} />)}
        </div>}
        </article>
        
    )
}
---------------------ArticlePreview.js------------------------------

import React from "react";
import noImage from '../../utility/images/no-image.png';
import twitter from '../../utility/images/twitter-logo.png';
import { Link } from "react-router-dom";
import { renderAwards, dateConverter } from "../../utility/functions";
import { colorway } from "../../utility/colorway";
import { isDarkMode } from "../settings/settingsSlice";
import { useSelector } from "react-redux";

export const ArticlePreview = ({article}) => {

    const { normal, dark } = colorway;
    const darkMode = useSelector(isDarkMode);
    const colors = darkMode ? dark : normal;

    const mediaSelector = () => {
        if(article.thumbnail === 'self'){
            if(article.selftext.includes('twitter.com')){
               return <img className='thumbnail' src={twitter} alt='twitter logo' />    
            }
            return <p className='thumbnail-text' style={colors.articlePreview.thumbnailText}>{article.selftext}</p>
        } else if(article.thumbnail === 'default' || article.thumbnail === ''){
            return <img className='thumbnail' src={noImage} alt='' />
        } else {
            return <img className='thumbnail' src={article.thumbnail} alt='' />
        }
    };

    return (
        <div className="article-preview" style={colors.articlePreview.articlePreview}>
            <h2 className={article.title.length > 100 && 'large-title'}>{article.title}</h2>
            <div className='award-container'>
                {renderAwards(article)}
            </div>
            <p className="upVotes" style={colors.articlePreview.upVotes}>{article.ups - article.downs}</p>
            {mediaSelector()}
            <p className='filler'></p>
            <hr/>
            <div className="footer info">
                <p>{article.author}</p>
                <p>{dateConverter(article)}</p>
                <Link to={`/${article.id}`} style={colors.articlePreview.articleLink}><p >Full Article</p></Link>
            </div>
        </div>
    )
}

---------------------ArticleLayout.js------------------------------

import React, { useEffect, useState } from "react";
import { useSelector, useDispatch } from "react-redux";
import { selectTopics, clearTopics } from "../topics/topicsSlice";
import { articlesLoaded, loadArticles, selectArticles, isLoading } from "./articlesSlice";
import { subredditList } from "../../utility/subreddits";
import { ArticlePreview } from "../article/ArticlePreview";
import { colorway } from "../../utility/colorway";
import { LoadingArticle } from "./LoadingArticle";
import { isDarkMode } from "../settings/settingsSlice";


export const ArticleLayout = () => {
    const dispatch = useDispatch();
    const topics = useSelector(selectTopics);
    const isLoaded = useSelector(articlesLoaded);
    const [subreddits, setSubreddits] = useState([]);
    const articles = useSelector(selectArticles);
    const { normal, dark } = colorway;
    const darkMode = useSelector(isDarkMode);
    const colors = darkMode ? dark : normal;
    const articlesLoading = useSelector(isLoading);
  
    useEffect(()=>{
        let subs = [];
        for(const topic of topics){
            subredditList[topic].forEach(sub => subs.push(sub))
        }
        setSubreddits(subs);
    },[topics]);

    useEffect(()=>{
        if(subreddits.length === 0){return}
        if(isLoaded){return}
        dispatch(loadArticles(subreddits))
        dispatch(clearTopics())
    },[dispatch, subreddits, isLoaded])

    const loadingRender = () => {
        if(articlesLoading){
            let loadingArticles = [];
            for(let i = 0; i < 9; i++){
                loadingArticles.push(<LoadingArticle key={i} />)
            }
            return loadingArticles;
        } else {
            let loadedArticles = articles.map(article => <ArticlePreview key={article.data.id} article={article.data} />);
            return loadedArticles;
        }
    }


    return (
        <div className="preview-container" style={colors.articlePreview.previewContainer}>
            {loadingRender()}
        </div>
    )
}

---------------------LoadingArticle.js------------------------------

import React from "react";
import loading from '../../utility/images/loading.gif';

export const LoadingArticle = () => {
    return (
        <div className="article-preview" style={{backgroundColor: 'white'}}>
            <h2 style={{color: 'grey', backgroundColor: 'grey', borderRadius: '5px'}}>Loading</h2>
            <div className='award-container'>   
            </div>
            <p className='filler'></p>
            <img className='thumbnail' src={loading} alt='loading' />
            <p className='filler'></p>
            <hr/>
            <div className="footer info">
                <p  style={{color: 'grey', backgroundColor: 'grey', borderRadius: '5px'}}>Loading Full Article</p>
                <p  style={{color: 'grey', backgroundColor: 'grey', borderRadius: '5px'}}>Loading Full Article</p>
                <p  style={{color: 'grey', backgroundColor: 'grey', borderRadius: '5px'}}>Full Article</p>
            </div>
        </div>
    )
}

---------------------Comments.js------------------------------

import React from "react";
import avatar from '../../utility/images/avatar.png';
import upArrow from '../../utility/images/up-arrow.png';
import downArrow from '../../utility/images/down-arrow.png';
import { colorway } from "../../utility/colorway";
import { isDarkMode } from "../settings/settingsSlice";
import { useSelector } from "react-redux";

export const Comment = ({data}) => {

    const { normal, dark } = colorway;
    const darkMode = useSelector(isDarkMode);
    const colors = darkMode ? dark : normal;

    return (
        <div className="comments" style={colors.comments.comments}>
            <div className='comments-header'>
                <img src={avatar} alt="avatar" />
                <h2>{data.author}</h2>
            </div>
            <div className="up-votes">
                <img src={upArrow} alt='up arrow' />
                <p className="votes">{data.ups - data.downs}</p>
                <img src={downArrow} alt='down arrow' />
            </div>
            <p className="comments-body"> {data.body} </p>
        </div>
    )
}


---------------------Settings.js------------------------------

import React from "react";
import { useDispatch, useSelector } from "react-redux";
import { toggleTopics, toggleDarkMode, isDarkMode } from "./settingsSlice";
import { colorway } from "../../utility/colorway";


export const Settings = () => {
    const dispatch = useDispatch();
    const { normal, dark } = colorway;
    const darkMode = useSelector(isDarkMode);
    const colors = darkMode ? dark : normal;

    return (
        <nav style={colors.settings.nav}>
            <ul>
                <li className='button' onClick={()=>{dispatch(toggleTopics())}}>Add/Remove Topics</li>
                <li onClick={()=>{dispatch(toggleDarkMode())}}>Toggle Dark Mode</li>
                <li className="coming-soon">Filters</li>
                <li className="coming-soon">Change Account</li>
            </ul>
        </nav>
    )
}

---------------------Topics.js------------------------------

import React from "react";
import { useState } from "react";
import { submitTopics, selectTopics } from "../topics/topicsSlice";
import { useDispatch, useSelector } from 'react-redux';
import { clearArticles } from "../articleLayout/articlesSlice";
import { toggleTopics, isDarkMode } from "../settings/settingsSlice";
import { colorway } from "../../utility/colorway";



export const Topics = () => {
    const dispatch = useDispatch();
    const stateTopics = useSelector(selectTopics);
    const [topics, setTopics] = useState([]);
    const { normal, dark } = colorway;
    const darkMode = useSelector(isDarkMode);
    const colors = darkMode ? dark : normal;
   
    const toggleTopic = ({ target }) => {
        if(target.checked) {
            setTopics( prev => [...prev, target.value])
        } else if (!target.checked){
            let newTopics = topics.filter(topic => topic !== target.value);
            setTopics(newTopics)
        }
    }

    const isChecked = ({target}) => {
        if(stateTopics.includes(target.value)){
            target.checked = true;
        }
        console.log(target.value)
    }



    const handleSubmit = (e) => {
        e.preventDefault();
        dispatch(clearArticles())
        dispatch(submitTopics(topics))
        dispatch(toggleTopics())
    }


    return(
        <div className='topics' style={colors.topics.topic}>
            <h2>Choose your topics</h2>
            <form onSubmit={handleSubmit}>
                <div className='input-group'>
                <label for="news">News</label>
                <input onLoad={isChecked} onClick={toggleTopic} type="checkbox" id="news" value="news"/>
                </div>
                <div className='input-group'>
                <label for="tech">Tech</label>
                <input onClick={toggleTopic} type="checkbox" id="tech" value="tech"/>
                </div>
                <div className='input-group'>
                <label for="travel">Travel</label>
                <input onClick={toggleTopic} type="checkbox" id="travel" value="travel"/>
                </div>
                <div className='input-group'>
                <label for="fashion">Fashion</label>
                <input onClick={toggleTopic} type="checkbox" id="fashion" value="fashion"/>
                </div>
                <div className='input-group'>
                <label for="humor">Humor</label>
                <input onClick={toggleTopic} type="checkbox" id="humor" value="humor"/>
                </div>
                <div className='input-group'>
                <label for="gaming">Gaming</label>
                <input onClick={toggleTopic} type="checkbox" id="gaming" value="gaming"/>
                </div>
                <div className='input-group'>
                <label for="cars">Cars</label>
                <input onClick={toggleTopic} type="checkbox" id="cars" value="cars"/>
                </div>
                <div className='input-group'>
                <label for="animals">Animals</label>
                <input onClick={toggleTopic} type="checkbox" id="animals" value="animals"/>
                </div>
                <div className='input-group'>
                <label for="sports">Sports</label>
                <input onClick={toggleTopic} type="checkbox" id="sports" value="sports"/>
                </div>
                <input id='submit' type="submit" value="Submit" />
            </form>
        </div>
    )
}