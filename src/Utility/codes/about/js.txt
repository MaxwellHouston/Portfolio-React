
<----Sample Code----->


const _ = {
  clamp (num,lower,upper) {
    let lowClamp= Math.max(num,lower);
    let clampValue = Math.min(lowClamp,upper);
return clampValue;
  },
  inRange (number,startValue,endValue){
    let newEndValue;
    let newStartValue;
    if(!endValue){
      newEndValue = startValue;
      newStartValue = 0;
    }
    else if (startValue > endValue){
      newEndValue = startValue;
      newStartValue = endValue;
    }
    else{
      newStartValue = startValue;
      newEndValue = endValue;
    }
    if(number>=newStartValue&&number< newEndValue){
      return true;
    }
    else{
      return false;
    } 
  },
  words (string){
    let array = string.split(' ');
    return array
  },
  pad (string,length){
    let finalString = string
    let frontPadLength = Math.floor(length/2);
    let endPadLength = Math.ceil(length/2);
    let frontPad = ' '.repeat(frontPadLength-1);
    let endPad = ' '.repeat(endPadLength-1)
    if(string.length >= length){
      return string
    }
    else{
      return `${frontPad}${string}${endPad}`
    } 
  },
  has (obj,key){
   let hasValue; 
    if(obj[key]){
      hasValue = true
    }
    else {
      hasValue = false
    }
    return hasValue
  },
  invert(obj){
   let invertedObject = {}
   for(const keys in obj){
     let originalValue = obj[keys];
     invertedObject[originalValue]= keys;
   }
   return invertedObject;
},
findKey(obj,predicate){
  let answer;
  for(const keys in obj){
    if(predicate(obj[keys])){
      answer = keys;
      break;
    }
    else{
      answer =  undefined
    }
  }
  return answer;
},
drop (array,num){
  let newArray = []
  if(!num){
    array.shift();
    newArray = array;
  }
  else{
    for(let i=0;i<num;i++){
      array.shift()
    }
    newArray = array;
  }
  return newArray;
},
dropWhile (array,predicate){
  let dropNumber = array.findIndex((element,index)=>{
    return !predicate(element,index,array);
  });
  let droppedArray = this.drop(array,dropNumber);
  return droppedArray
},
chunk (array,size){
  let chunkArray = [];
  let numberOfChunks = Math.ceil(array.length/size);
  let position = 0;
  for(i=1; i<=numberOfChunks; i++){
    chunkArray.push(array.slice(position,position+size));
    position += size;
  }
  return chunkArray;
}
}


